{"version":3,"sources":["scripts/main.js"],"names":["bodyElement","document","querySelector","successMessage","message","insertAdjacentHTML","errorMessage","waitFor","evt","Promise","resolve","addEventListener","firstPromise","reject","setTimeout","Error","then","result","catch","error","secondPromise","race","thirdPromise","all"],"mappings":";AAAA,aAEA,IAAMA,EAAcC,SAASC,cAAc,QAE3C,SAASC,EAAeC,GACtBJ,EAAYK,mBAAmB,aAEzBD,6DAAAA,OAAAA,EAFN,sBAOF,SAASE,EAAaF,GACpBJ,EAAYK,mBAAmB,aAEzBD,6DAAAA,OAAAA,EAFN,sBAOF,SAASG,EAAQC,GACR,OAAA,IAAIC,QAAQ,SAAAC,GACjBV,EAAYW,iBAAiBH,EAAK,WAChCE,QAKN,IAAME,EAAe,IAAIH,QAAQ,SAACC,EAASG,GACzCb,EAAYW,iBAAiB,QAAS,WACpCD,EAAQ,gCAGVI,WAAW,WACTD,EAAOE,MAAM,gCACZ,OAGLH,EACGI,KAAK,SAAAC,GACJd,EAAe,gCAEhBe,MAAM,SAAAC,GACLb,EAAaa,KAGjB,IAAMC,EAAgBX,QAAQY,KAAK,CAACd,EAAQ,SAAUA,EAAQ,iBAE9Da,EACGJ,KAAK,SAAAC,GACJd,EAAe,iCAGnB,IAAMmB,EAAeb,QAAQc,IAAI,CAAChB,EAAQ,SAAUA,EAAQ,iBAE5De,EACGN,KAAK,SAAAC,GACJd,EAAe","file":"main.43b82be5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst bodyElement = document.querySelector('body');\n\nfunction successMessage(message) {\n  bodyElement.insertAdjacentHTML('afterbegin', `\n    <div class=\"success\" data-qa=\"notification\">\n      ${message}\n    <div>\n    `);\n}\n\nfunction errorMessage(message) {\n  bodyElement.insertAdjacentHTML('afterbegin', `\n    <div class=\"warning\" data-qa=\"notification\">\n      ${message}\n    <div>\n    `);\n}\n\nfunction waitFor(evt) {\n  return new Promise(resolve => {\n    bodyElement.addEventListener(evt, () => {\n      resolve();\n    });\n  });\n}\n\nconst firstPromise = new Promise((resolve, reject) => {\n  bodyElement.addEventListener('click', () => {\n    resolve('First promise was resolved');\n  });\n\n  setTimeout(() => {\n    reject(Error('First promise was rejected'));\n  }, 3000);\n});\n\nfirstPromise\n  .then(result => {\n    successMessage('First promise was resolved');\n  })\n  .catch(error => {\n    errorMessage(error);\n  });\n\nconst secondPromise = Promise.race([waitFor('click'), waitFor('contextmenu')]);\n\nsecondPromise\n  .then(result => {\n    successMessage('Second promise was resolved');\n  });\n\nconst thirdPromise = Promise.all([waitFor('click'), waitFor('contextmenu')]);\n\nthirdPromise\n  .then(result => {\n    successMessage('Third promise was resolved');\n  });\n"]}